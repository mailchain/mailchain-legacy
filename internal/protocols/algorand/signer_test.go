// Copyright 2021 Finobo
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package algorand

import (
	"crypto/ed25519"
	"testing"

	"github.com/algorand/go-algorand-sdk/types"
	"github.com/mailchain/mailchain/crypto"
	"github.com/mailchain/mailchain/crypto/ed25519/ed25519test"
	"github.com/mailchain/mailchain/crypto/sr25519/sr25519test"
	"github.com/mailchain/mailchain/internal/mailbox/signer"
	"github.com/stretchr/testify/assert"
)

func Test_validatePrivateKeyType(t *testing.T) {
	type args struct {
		pk crypto.PrivateKey
	}
	tests := []struct {
		name    string
		args    args
		want    ed25519.PrivateKey
		wantErr bool
	}{
		{
			"success-alice",
			args{
				ed25519test.AlicePrivateKey,
			},
			ed25519.PrivateKey{0xd, 0x9b, 0x4a, 0x3c, 0x10, 0x72, 0x19, 0x91, 0xc6, 0xb8, 0x6, 0xf0, 0xf3, 0x43, 0x53, 0x5d, 0xc2, 0xb4, 0x6c, 0x74, 0xbe, 0xce, 0x50, 0xa0, 0xa0, 0xd6, 0xb9, 0xf0, 0x7, 0xd, 0x31, 0x57, 0x72, 0x3c, 0xaa, 0x23, 0xa5, 0xb5, 0x11, 0xaf, 0x5a, 0xd7, 0xb7, 0xef, 0x60, 0x76, 0xe4, 0x14, 0xab, 0x7e, 0x75, 0xa9, 0xdc, 0x91, 0xe, 0xa6, 0xe, 0x41, 0x7a, 0x2b, 0x77, 0xa, 0x56, 0x71},
			false,
		},
		{
			"invalid-sr25519",
			args{
				sr25519test.AlicePrivateKey,
			},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := validatePrivateKeyType(tt.args.pk)
			if (err != nil) != tt.wantErr {
				t.Errorf("validatePrivateKeyType() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !assert.Equal(t, tt.want, got) {
				t.Errorf("validatePrivateKeyType() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestNewSigner(t *testing.T) {
	type args struct {
		privateKey crypto.PrivateKey
	}
	tests := []struct {
		name    string
		args    args
		want    *Signer
		wantErr bool
	}{
		{
			"success-alice",
			args{
				ed25519test.AlicePrivateKey,
			},
			&Signer{privateKey: ed25519.PrivateKey{0xd, 0x9b, 0x4a, 0x3c, 0x10, 0x72, 0x19, 0x91, 0xc6, 0xb8, 0x6, 0xf0, 0xf3, 0x43, 0x53, 0x5d, 0xc2, 0xb4, 0x6c, 0x74, 0xbe, 0xce, 0x50, 0xa0, 0xa0, 0xd6, 0xb9, 0xf0, 0x7, 0xd, 0x31, 0x57, 0x72, 0x3c, 0xaa, 0x23, 0xa5, 0xb5, 0x11, 0xaf, 0x5a, 0xd7, 0xb7, 0xef, 0x60, 0x76, 0xe4, 0x14, 0xab, 0x7e, 0x75, 0xa9, 0xdc, 0x91, 0xe, 0xa6, 0xe, 0x41, 0x7a, 0x2b, 0x77, 0xa, 0x56, 0x71}},
			false,
		},
		{
			"err-sr25519",
			args{
				sr25519test.AlicePrivateKey,
			},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewSigner(tt.args.privateKey)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewSigner() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !assert.Equal(t, tt.want, got) {
				t.Errorf("NewSigner() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSigner_Sign(t *testing.T) {
	type fields struct {
		privateKey crypto.PrivateKey
	}
	type args struct {
		opts signer.Options
	}
	tests := []struct {
		name                  string
		fields                fields
		args                  args
		wantSignedTransaction interface{}
		wantErr               bool
	}{
		{
			"success-empty-tx",
			fields{
				ed25519test.AlicePrivateKey,
			},
			args{
				SignerOptions{},
			},
			[]byte{0x82, 0xa4, 0x73, 0x67, 0x6e, 0x72, 0xc4, 0x20, 0x72, 0x3c, 0xaa, 0x23, 0xa5, 0xb5, 0x11, 0xaf, 0x5a, 0xd7, 0xb7, 0xef, 0x60, 0x76, 0xe4, 0x14, 0xab, 0x7e, 0x75, 0xa9, 0xdc, 0x91, 0xe, 0xa6, 0xe, 0x41, 0x7a, 0x2b, 0x77, 0xa, 0x56, 0x71, 0xa3, 0x73, 0x69, 0x67, 0xc4, 0x40, 0xfd, 0x22, 0xb1, 0x19, 0x76, 0xfd, 0x94, 0xa7, 0xda, 0x89, 0xd4, 0x5, 0x45, 0xe6, 0xf3, 0x92, 0x79, 0xfc, 0x2b, 0x8d, 0xf1, 0xf0, 0xb9, 0x69, 0x7b, 0xf4, 0xfa, 0x8, 0x9a, 0xf4, 0xe0, 0xd8, 0xd5, 0xa4, 0x30, 0x96, 0x81, 0x52, 0xb9, 0x4c, 0x99, 0xf9, 0xb, 0xe0, 0x26, 0x83, 0x46, 0x94, 0x4f, 0x37, 0xd6, 0xea, 0x56, 0xe7, 0x36, 0x43, 0xbe, 0x4d, 0x65, 0x6b, 0xe1, 0x72, 0x24, 0xf},
			false,
		},
		{
			"success",
			fields{
				ed25519test.AlicePrivateKey,
			},
			args{
				SignerOptions{
					types.Transaction{
						PaymentTxnFields: types.PaymentTxnFields{
							Amount: 100,
						},
					},
				},
			},
			[]byte{0x83, 0xa4, 0x73, 0x67, 0x6e, 0x72, 0xc4, 0x20, 0x72, 0x3c, 0xaa, 0x23, 0xa5, 0xb5, 0x11, 0xaf, 0x5a, 0xd7, 0xb7, 0xef, 0x60, 0x76, 0xe4, 0x14, 0xab, 0x7e, 0x75, 0xa9, 0xdc, 0x91, 0xe, 0xa6, 0xe, 0x41, 0x7a, 0x2b, 0x77, 0xa, 0x56, 0x71, 0xa3, 0x73, 0x69, 0x67, 0xc4, 0x40, 0x72, 0x5c, 0x54, 0x5e, 0xaa, 0xa8, 0xe2, 0x58, 0xea, 0x6e, 0xd2, 0x9, 0xf3, 0xb3, 0x1a, 0x7a, 0x71, 0xf7, 0x55, 0x70, 0x49, 0x12, 0x60, 0x96, 0x6a, 0x20, 0x55, 0x94, 0xf4, 0xdd, 0x34, 0x45, 0xc9, 0x94, 0x98, 0x8e, 0xbb, 0xc0, 0xe6, 0x21, 0xce, 0xd1, 0x8c, 0x6a, 0x81, 0x6, 0x1a, 0x17, 0x68, 0x30, 0xf4, 0x47, 0xec, 0xe2, 0x7c, 0x7d, 0x15, 0xca, 0x41, 0xcc, 0xdd, 0x72, 0xd5, 0xe, 0xa3, 0x74, 0x78, 0x6e, 0x81, 0xa3, 0x61, 0x6d, 0x74, 0x64},
			false,
		},
		{
			"success",
			fields{
				ed25519test.AlicePrivateKey,
			},
			args{
				func() interface{} {
					type NotSignerOptions struct {
						Tx *types.Transaction
					}
					return NotSignerOptions{Tx: &types.Transaction{}}
				}(),
			},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e, err := NewSigner(tt.fields.privateKey)
			assert.NoError(t, err)

			gotSignedTransaction, err := e.Sign(tt.args.opts)
			if (err != nil) != tt.wantErr {
				t.Errorf("Signer.Sign() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !assert.Equal(t, tt.wantSignedTransaction, gotSignedTransaction) {
				t.Errorf("Signer.Sign() = %v, want %v", gotSignedTransaction, tt.wantSignedTransaction)
			}
		})
	}
}
