// Copyright 2022 Mailchain Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package hash

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_parse(t *testing.T) {
	type args struct {
		hash []byte
	}
	tests := []struct {
		name       string
		args       args
		wantKind   int
		wantDigest []byte
		wantErr    bool
	}{
		{
			"sha3-256",
			args{
				[]byte{0x16, 0x20, 0xda, 0x8a, 0xdf, 0x1a, 0xfb, 0x4c, 0x33, 0x4, 0xb9, 0x62, 0xce, 0x1d, 0x49, 0xc2, 0xd, 0x63, 0x58, 0x3e, 0xcd, 0x98, 0xdc, 0xeb, 0x2, 0x1d, 0x32, 0x8d, 0x4f, 0x82, 0xbe, 0x48, 0x42, 0x9f},
			},
			SHA3256,
			[]byte{0xda, 0x8a, 0xdf, 0x1a, 0xfb, 0x4c, 0x33, 0x4, 0xb9, 0x62, 0xce, 0x1d, 0x49, 0xc2, 0xd, 0x63, 0x58, 0x3e, 0xcd, 0x98, 0xdc, 0xeb, 0x2, 0x1d, 0x32, 0x8d, 0x4f, 0x82, 0xbe, 0x48, 0x42, 0x9f},
			false,
		},
		{
			"err-sha3-256",
			args{
				[]byte{0x16, 0x20, 0x8a, 0xdf, 0x1a, 0xfb, 0x4c, 0x33, 0x4, 0xb9, 0x62, 0xce, 0x1d, 0x49, 0xc2, 0xd, 0x63, 0x58, 0x3e, 0xcd, 0x98, 0xdc, 0xeb, 0x2, 0x1d, 0x32, 0x8d, 0x4f, 0x82, 0xbe, 0x48, 0x42, 0x9f},
			},
			Unknown,
			nil,
			true,
		},
		{
			"mur-mur-3",
			args{
				[]byte{0x22, 0x4, 0xa8, 0xf0, 0x98, 0xa1},
			},
			MurMur3128,
			[]byte{0xa8, 0xf0, 0x98, 0xa1},
			false,
		},
		{
			"err-mur-mur-3",
			args{
				[]byte{0x22, 0x4, 0xf0, 0x98, 0xa1},
			},
			Unknown,
			nil,
			true,
		},
		{
			"CIVv1SHA2256Raw",
			args{
				[]byte{0x1, 0x55, 0x12, 0x20, 0x47, 0xe4, 0xee, 0x7f, 0x21, 0x1f, 0x73, 0x26, 0x5d, 0xd1, 0x76, 0x58, 0xf6, 0xe2, 0x1c, 0x13, 0x18, 0xbd, 0x6c, 0x81, 0xf3, 0x75, 0x98, 0xe2, 0xa, 0x27, 0x56, 0x29, 0x95, 0x42, 0xef, 0xcf},
			},
			CIVv1SHA2256Raw,
			[]byte{0x47, 0xe4, 0xee, 0x7f, 0x21, 0x1f, 0x73, 0x26, 0x5d, 0xd1, 0x76, 0x58, 0xf6, 0xe2, 0x1c, 0x13, 0x18, 0xbd, 0x6c, 0x81, 0xf3, 0x75, 0x98, 0xe2, 0xa, 0x27, 0x56, 0x29, 0x95, 0x42, 0xef, 0xcf},
			false,
		},
		{
			"err-CIVv1SHA2256Raw",
			args{
				[]byte{0x1, 0x55, 0x47, 0xe4, 0xee, 0x7f, 0x21, 0x1f, 0x73, 0x26, 0x5d, 0xd1, 0x76, 0x58, 0xf6, 0xe2, 0x1c, 0x13, 0x18, 0xbd, 0x6c, 0x81, 0xf3, 0x75, 0x98, 0xe2, 0xa, 0x27, 0x56, 0x29, 0x95, 0x42, 0xef, 0xcf},
			},
			Unknown,
			nil,
			true,
		},
		{
			"err-empty",
			args{
				[]byte{},
			},
			Unknown,
			nil,
			true,
		},
		{
			"err-unknown",
			args{
				[]byte{0xff},
			},
			Unknown,
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotKind, gotDigest, err := parse(tt.args.hash)
			if (err != nil) != tt.wantErr {
				t.Errorf("parse() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if gotKind != tt.wantKind {
				t.Errorf("parse() gotKind = %v, want %v", gotKind, tt.wantKind)
			}
			if !assert.Equal(t, tt.wantDigest, gotDigest) {
				t.Errorf("parse() gotDigest = %v, want %v", gotDigest, tt.wantDigest)
			}
		})
	}
}
