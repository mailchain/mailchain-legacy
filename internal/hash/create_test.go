// Copyright 2022 Mailchain Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package hash

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_Create(t *testing.T) {
	type args struct {
		kind int
		data []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{
			"sha3-256",
			args{
				SHA3256,
				[]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09},
			},
			[]byte{0x16, 0x20, 0xda, 0x8a, 0xdf, 0x1a, 0xfb, 0x4c, 0x33, 0x4, 0xb9, 0x62, 0xce, 0x1d, 0x49, 0xc2, 0xd, 0x63, 0x58, 0x3e, 0xcd, 0x98, 0xdc, 0xeb, 0x2, 0x1d, 0x32, 0x8d, 0x4f, 0x82, 0xbe, 0x48, 0x42, 0x9f},
			false,
		},
		{
			"mur-mur-3",
			args{
				MurMur3128,
				[]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09},
			},
			[]byte{0x22, 0x4, 0xa8, 0xf0, 0x98, 0xa1},
			false,
		},
		{
			"CIVv1SHA2256Raw",
			args{
				CIVv1SHA2256Raw,
				[]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09},
			},
			[]byte{0x1, 0x55, 0x12, 0x20, 0x47, 0xe4, 0xee, 0x7f, 0x21, 0x1f, 0x73, 0x26, 0x5d, 0xd1, 0x76, 0x58, 0xf6, 0xe2, 0x1c, 0x13, 0x18, 0xbd, 0x6c, 0x81, 0xf3, 0x75, 0x98, 0xe2, 0xa, 0x27, 0x56, 0x29, 0x95, 0x42, 0xef, 0xcf},
			false,
		},
		{
			"ipfs-test",
			args{
				CIVv1SHA2256Raw,
				[]byte("Its a test file"),
			},
			[]byte{0x1, 0x55, 0x12, 0x20, 0xd9, 0xf9, 0x51, 0x7e, 0xbb, 0xa1, 0x22, 0x1b, 0x56, 0xfc, 0xb, 0x5b, 0xd9, 0xd9, 0x95, 0x2d, 0xc3, 0x41, 0x9a, 0xb9, 0x3, 0x4e, 0x4b, 0x21, 0xc3, 0x18, 0xbb, 0xb, 0xae, 0xcc, 0x38, 0x80},
			false,
		},
		{
			"err-kind",
			args{
				Unknown,
				[]byte("Its a test file"),
			},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Create(tt.args.kind, tt.args.data)
			if (err != nil) != tt.wantErr {
				t.Errorf("create() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !assert.Equal(t, tt.want, got) {
				t.Errorf("create() = %v, want %v", got, tt.want)
			}
		})
	}
}
