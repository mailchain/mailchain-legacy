package nacl

import (
	"bytes"
	"crypto/rand"
	"errors"
	"io"
	"testing"
	"testing/iotest"

	"github.com/golang/mock/gomock"
	"github.com/mailchain/mailchain/crypto"
	"github.com/mailchain/mailchain/crypto/cipher"
	"github.com/mailchain/mailchain/crypto/cipher/ciphertest"
	"github.com/mailchain/mailchain/crypto/cipher/ecdh"
	"github.com/mailchain/mailchain/crypto/cryptotest"
	"github.com/mailchain/mailchain/crypto/ed25519/ed25519test"
	"github.com/mailchain/mailchain/crypto/secp256k1/secp256k1test"
	"github.com/mailchain/mailchain/crypto/sr25519/sr25519test"
	"github.com/stretchr/testify/assert"
)

func TestNewEncrypter(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	type args struct {
		publicKey crypto.PublicKey
	}
	tests := []struct {
		name    string
		args    args
		want    *Encrypter
		wantErr bool
	}{
		{
			"ed25519",
			args{
				ed25519test.BobPublicKey,
			},
			&Encrypter{
				rand:      rand.Reader,
				publicKey: ed25519test.BobPublicKey,
				keyExchange: func() cipher.KeyExchange {
					k, _ := ecdh.NewED25519(rand.Reader)
					return k
				}(),
			},
			false,
		},
		{
			"sr25519",
			args{
				sr25519test.BobPublicKey,
			},
			&Encrypter{
				rand:      rand.Reader,
				publicKey: sr25519test.BobPublicKey,
				keyExchange: func() cipher.KeyExchange {
					k, _ := ecdh.NewSR25519(rand.Reader)
					return k
				}(),
			},
			false,
		},
		{
			"secp256k1",
			args{
				secp256k1test.BobPublicKey,
			},
			&Encrypter{
				rand:      rand.Reader,
				publicKey: secp256k1test.BobPublicKey,
				keyExchange: func() cipher.KeyExchange {
					k, _ := ecdh.NewSECP256K1(rand.Reader)
					return k
				}(),
			},
			false,
		},
		{
			"err-validate",
			args{
				cryptotest.NewMockPublicKey(mockCtrl),
			},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := NewEncrypter(tt.args.publicKey)
			if (err != nil) != tt.wantErr {
				t.Errorf("NewEncrypter() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !assert.Equal(t, tt.want, got) {
				t.Errorf("NewEncrypter() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestEncrypter_Encrypt(t *testing.T) {
	mockCtrl := gomock.NewController(t)
	defer mockCtrl.Finish()

	type fields struct {
		rand        io.Reader
		publicKey   crypto.PublicKey
		keyExchange cipher.KeyExchange
	}
	type args struct {
		message cipher.PlainContent
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    cipher.EncryptedContent
		wantErr bool
	}{
		{
			"ed25519-bob",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				ed25519test.BobPublicKey,
				func() cipher.KeyExchange {
					k, _ := ecdh.NewED25519(bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")))
					return k
				}(),
			},
			args{
				[]byte("message"),
			},
			cipher.EncryptedContent{0x2a, 0xe2, 0x80, 0x56, 0xec, 0xbf, 0x3c, 0xc5, 0xac, 0xd1, 0x60, 0xdd, 0xf0, 0x22, 0x97, 0xbb, 0xba, 0xa1, 0x55, 0x5b, 0xde, 0xa0, 0x4, 0xc2, 0x9b, 0xa9, 0x96, 0x48, 0x89, 0xe1, 0xdc, 0xcd, 0x1, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0xc2, 0x45, 0x87, 0x8, 0x51, 0xe3, 0x9b, 0xff, 0x31, 0x8, 0x9f, 0x40, 0xb6, 0x99, 0x57, 0x99, 0xef, 0x20, 0xba, 0x8e, 0x3b, 0xfd, 0xd1},
			false,
		},
		{
			"ed25519-alice",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				ed25519test.AlicePublicKey,
				func() cipher.KeyExchange {
					k, _ := ecdh.NewED25519(bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")))
					return k
				}(),
			},
			args{
				[]byte("message"),
			},
			cipher.EncryptedContent{0x2a, 0xe2, 0x80, 0x56, 0xec, 0xbf, 0x3c, 0xc5, 0xac, 0xd1, 0x60, 0xdd, 0xf0, 0x22, 0x97, 0xbb, 0xba, 0xa1, 0x55, 0x5b, 0xde, 0xa0, 0x4, 0xc2, 0x9b, 0xa9, 0x96, 0x48, 0x89, 0xe1, 0xdc, 0xcd, 0x1, 0x5b, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x77, 0x66, 0x5d, 0x95, 0x6d, 0x2f, 0x8e, 0x7, 0x7e, 0x90, 0x7, 0xa4, 0xa1, 0xff, 0x59, 0x9c, 0xbf, 0xf9, 0x38, 0x16, 0xd6, 0x8e, 0xed},
			false,
		},
		{
			"sr25519-bob",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				sr25519test.BobPublicKey,
				func() cipher.KeyExchange {
					k, _ := ecdh.NewSR25519(bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")))
					return k
				}(),
			},
			args{
				[]byte("message"),
			},
			cipher.EncryptedContent{0x2a, 0xe3, 0x82, 0xde, 0x3d, 0x1f, 0x8a, 0x6, 0x59, 0xd2, 0xc6, 0x39, 0xa1, 0x8e, 0x6d, 0x59, 0x3, 0x18, 0x8b, 0x5d, 0xf2, 0x68, 0xc, 0x52, 0x27, 0x61, 0x36, 0x6f, 0xa6, 0xfb, 0x92, 0xde, 0x8a, 0xc, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0xfb, 0x91, 0x80, 0x5f, 0xe7, 0xc7, 0x35, 0xa4, 0x22, 0x50, 0x80, 0x25, 0x53, 0x15, 0xdd, 0x9c, 0x18, 0x93, 0xdc, 0xa3, 0x20, 0xa2, 0x51},
			false,
		},
		{
			"sr25519-alice",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				sr25519test.AlicePublicKey,
				func() cipher.KeyExchange {
					k, _ := ecdh.NewSR25519(bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")))
					return k
				}(),
			},
			args{
				[]byte("message"),
			},
			cipher.EncryptedContent{0x2a, 0xe3, 0x82, 0xde, 0x3d, 0x1f, 0x8a, 0x6, 0x59, 0xd2, 0xc6, 0x39, 0xa1, 0x8e, 0x6d, 0x59, 0x3, 0x18, 0x8b, 0x5d, 0xf2, 0x68, 0xc, 0x52, 0x27, 0x61, 0x36, 0x6f, 0xa6, 0xfb, 0x92, 0xde, 0x8a, 0xc, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x2f, 0xe4, 0xca, 0xb, 0x84, 0x4e, 0x10, 0x29, 0x70, 0x2a, 0xe1, 0xb0, 0xeb, 0x4f, 0x96, 0x2c, 0xfe, 0xaa, 0x73, 0x7f, 0xc9, 0x69, 0x1b},
			false,
		},
		{
			"secp256k1-bob",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				secp256k1test.BobPublicKey,
				func() cipher.KeyExchange {
					k, _ := ecdh.NewSECP256K1(bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")))
					return k
				}(),
			},
			args{
				[]byte("message"),
			},
			cipher.EncryptedContent{0x2a, 0xe1, 0x2, 0xa7, 0xc3, 0xc4, 0xf5, 0x83, 0x73, 0xc0, 0xf6, 0x30, 0xc8, 0x62, 0x63, 0xf, 0x6d, 0x8a, 0xbd, 0xe1, 0x39, 0x48, 0x30, 0xb9, 0xa4, 0x98, 0x8a, 0x3d, 0x6e, 0xe8, 0x86, 0x8b, 0x7a, 0x45, 0xf7, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0xdc, 0xcc, 0x41, 0xa1, 0x3a, 0xa5, 0x54, 0xb7, 0x6b, 0xa3, 0x76, 0x72, 0x21, 0x7d, 0xca, 0xe4, 0xea, 0x43, 0xea, 0xc2, 0x57, 0x83, 0xa9},
			false,
		},
		{
			"secp256k1-alice",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				secp256k1test.AlicePublicKey,
				func() cipher.KeyExchange {
					k, _ := ecdh.NewSECP256K1(bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")))
					return k
				}(),
			},
			args{
				[]byte("message"),
			},
			cipher.EncryptedContent{0x2a, 0xe1, 0x2, 0xa7, 0xc3, 0xc4, 0xf5, 0x83, 0x73, 0xc0, 0xf6, 0x30, 0xc8, 0x62, 0x63, 0xf, 0x6d, 0x8a, 0xbd, 0xe1, 0x39, 0x48, 0x30, 0xb9, 0xa4, 0x98, 0x8a, 0x3d, 0x6e, 0xe8, 0x86, 0x8b, 0x7a, 0x45, 0xf7, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x4c, 0xc6, 0xb4, 0xfe, 0x90, 0xda, 0x5e, 0xc7, 0x42, 0x23, 0x12, 0x5f, 0x6c, 0xb3, 0xf5, 0x15, 0x70, 0xed, 0xa7, 0x78, 0x8b, 0xf, 0x3d},
			false,
		},
		{
			"err-generate-ephemeral",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				ed25519test.AlicePublicKey,

				func() cipher.KeyExchange {
					m := ciphertest.NewMockKeyExchange(mockCtrl)
					m.EXPECT().EphemeralKey().Return(nil, errors.New("error"))
					return m
				}(),
			},
			args{
				[]byte("egassem"),
			},
			nil,
			true,
		},
		{
			"err-generate-ephemeral",
			fields{
				bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
				ed25519test.AlicePublicKey,
				func() cipher.KeyExchange {
					m := ciphertest.NewMockKeyExchange(mockCtrl)
					m.EXPECT().EphemeralKey().Return(ed25519test.BobPrivateKey, nil)
					m.EXPECT().SharedSecret(ed25519test.BobPrivateKey, ed25519test.AlicePublicKey).Return([]byte{}, errors.New("error"))
					return m
				}(),
			},
			args{
				[]byte("egassem"),
			},
			nil,
			true,
		},
		{
			"err-seal",
			fields{
				iotest.DataErrReader(bytes.NewReader(nil)),
				ed25519test.AlicePublicKey,
				func() cipher.KeyExchange {
					k, _ := ecdh.NewED25519(bytes.NewReader([]byte("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ")))
					return k
				}(),
			},
			args{
				[]byte("egassem"),
			},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			e := Encrypter{
				rand:        tt.fields.rand,
				publicKey:   tt.fields.publicKey,
				keyExchange: tt.fields.keyExchange,
			}
			got, err := e.Encrypt(tt.args.message)
			if (err != nil) != tt.wantErr {
				t.Errorf("Encrypter.Encrypt() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !assert.Equal(t, tt.want, got) {
				t.Errorf("Encrypter.Encrypt() = %v, want %v", got, tt.want)
			}
		})
	}
}
