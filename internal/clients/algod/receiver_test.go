// Copyright 2021 Finobo
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package algod

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"path/filepath"
	"testing"

	"github.com/mailchain/mailchain/encoding/encodingtest"
	"github.com/mailchain/mailchain/internal/protocols"
	"github.com/mailchain/mailchain/internal/protocols/algorand"
	"github.com/mailchain/mailchain/stores"
	"github.com/rs/zerolog"
	"github.com/stretchr/testify/assert"
)

func TestClient_Receive(t *testing.T) {
	server := httptest.NewServer(nil)
	defer server.Close()

	type fields struct {
		network    string
		algodToken string
		logger     zerolog.Logger
	}
	type args struct {
		ctx      context.Context
		protocol string
		network  string
		address  []byte
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    []stores.Transaction
		wantErr bool
	}{
		{
			"success-bob",
			fields{
				algorand.Testnet,
				"",
				zerolog.Nop(),
			},
			args{
				context.Background(),
				protocols.Algorand,
				algorand.Testnet,
				encodingtest.MustDecodeBase32("UWH6MCLMZSD2UYWTJVKFKX6JMTX2TGXAOYPUBNHFFQFBBVJULXJXZJNPBU"),
			},
			[]stores.Transaction{
				{
					EnvelopeData: []uint8{0x1, 0xa, 0x6e, 0x2a, 0xe2, 0xf9, 0x46, 0xea, 0x11, 0x9a, 0x3f, 0x4c, 0xb8, 0xdb, 0x76, 0xe6, 0x64, 0x3, 0x88, 0xdb, 0x12, 0xd9, 0x5e, 0x7f, 0xae, 0x70, 0x67, 0xd9, 0x5f, 0x2f, 0x67, 0xc5, 0xed, 0x6c, 0xa6, 0x8f, 0x71, 0x79, 0x18, 0x95, 0xaf, 0x63, 0x4f, 0x3d, 0x2d, 0x8a, 0xa, 0x96, 0x9d, 0xf1, 0xd0, 0x66, 0xee, 0x2f, 0x5, 0xe6, 0xa0, 0x27, 0x73, 0x89, 0xec, 0x76, 0xa6, 0xcc, 0x67, 0xe8, 0xf6, 0x5c, 0x5e, 0x1c, 0x4c, 0xc, 0x28, 0xb3, 0x52, 0xf4, 0xb8, 0x10, 0x9a, 0xc1, 0xe4, 0xa4, 0xf0, 0x97, 0xf0, 0x90, 0xdb, 0x0, 0xce, 0xd1, 0x4f, 0x24, 0x7f, 0xf9, 0xcc, 0x3e, 0x91, 0x32, 0x9a, 0xd, 0x68, 0xb1, 0xbf, 0x54, 0xa6, 0x59, 0x0, 0x5b, 0x72, 0x7f, 0x13, 0x97, 0x45, 0x12, 0x6, 0x22, 0x4, 0x46, 0x2c, 0x85, 0x32},
					BlockNumber:  1615677322,
					Hash:         []uint8{0x57, 0x53, 0x34, 0x42, 0x55, 0x45, 0x57, 0x51, 0x49, 0x56, 0x41, 0x4d, 0x5a, 0x4e, 0x4f, 0x4e, 0x48, 0x57, 0x56, 0x36, 0x4a, 0x35, 0x47, 0x50, 0x57, 0x59, 0x54, 0x44, 0x46, 0x59, 0x33, 0x55, 0x4d, 0x35, 0x55, 0x46, 0x53, 0x43, 0x48, 0x32, 0x34, 0x33, 0x4b, 0x49, 0x35, 0x45, 0x50, 0x51, 0x44, 0x56, 0x44, 0x41},
				},
				{
					EnvelopeData: []uint8{0x1, 0xa, 0x82, 0x1, 0x2e, 0xe1, 0xc, 0x59, 0x2, 0x4c, 0x83, 0x6d, 0x7c, 0xa1, 0x24, 0x70, 0xb5, 0xac, 0x74, 0x67, 0x30, 0x2, 0x12, 0x7d, 0xde, 0xda, 0xdb, 0xc6, 0xfc, 0x43, 0x75, 0xa8, 0xc0, 0x86, 0xb6, 0x50, 0x6, 0xe, 0xde, 0x19, 0x9f, 0x60, 0x3a, 0x15, 0x8b, 0xc7, 0x88, 0x4a, 0x90, 0x3e, 0xad, 0xf9, 0x7a, 0x2d, 0xd0, 0xfb, 0xe6, 0x9a, 0xc8, 0x1c, 0x21, 0x68, 0x30, 0xf9, 0x4e, 0x56, 0xb8, 0x47, 0xd9, 0x24, 0xb5, 0x1a, 0x7d, 0x82, 0x27, 0xc8, 0x7, 0x14, 0x21, 0x9e, 0x68, 0x21, 0xa5, 0x1b, 0xc7, 0xcb, 0xa9, 0x22, 0xf2, 0x91, 0xa4, 0x7b, 0xdf, 0xfe, 0x29, 0xe7, 0xc3, 0xf6, 0x7a, 0xd9, 0x8, 0xff, 0x37, 0x7b, 0xfc, 0xc0, 0xb6, 0x3, 0x0, 0x7e, 0xad, 0x4b, 0xfd, 0x87, 0xff, 0xa, 0xcc, 0x27, 0x25, 0x28, 0xca, 0x3, 0xd6, 0x38, 0x1e, 0x6d, 0xe, 0x1e, 0x2c, 0x5d, 0xfd, 0x24, 0xd5, 0x21},
					BlockNumber:  1613077932,
					Hash:         []uint8{0x57, 0x57, 0x55, 0x41, 0x37, 0x57, 0x32, 0x4a, 0x32, 0x4d, 0x46, 0x47, 0x59, 0x33, 0x52, 0x41, 0x58, 0x4a, 0x53, 0x33, 0x33, 0x44, 0x41, 0x4e, 0x44, 0x4b, 0x37, 0x57, 0x59, 0x34, 0x4d, 0x42, 0x50, 0x44, 0x33, 0x44, 0x4b, 0x48, 0x37, 0x43, 0x59, 0x33, 0x34, 0x49, 0x44, 0x48, 0x50, 0x58, 0x58, 0x55, 0x55, 0x51},
				},
			},
			false,
		},
		{
			"success-bob-rekey",
			fields{
				algorand.Testnet,
				"",
				zerolog.Nop(),
			},
			args{
				context.Background(),
				protocols.Algorand,
				algorand.Testnet,
				encodingtest.MustDecodeBase32("UWH6MCLMZSD2UYWTJVKFKX6JMTX2TGXAOYPUBNHFFQFBBVJULXJXZJNPBU"),
			},
			[]stores.Transaction{
				{
					EnvelopeData: []uint8{0x1, 0xa, 0x6e, 0x2a, 0xe2, 0xf9, 0x46, 0xea, 0x11, 0x9a, 0x3f, 0x4c, 0xb8, 0xdb, 0x76, 0xe6, 0x64, 0x3, 0x88, 0xdb, 0x12, 0xd9, 0x5e, 0x7f, 0xae, 0x70, 0x67, 0xd9, 0x5f, 0x2f, 0x67, 0xc5, 0xed, 0x6c, 0xa6, 0x8f, 0x71, 0x79, 0x18, 0x95, 0xaf, 0x63, 0x4f, 0x3d, 0x2d, 0x8a, 0xa, 0x96, 0x9d, 0xf1, 0xd0, 0x66, 0xee, 0x2f, 0x5, 0xe6, 0xa0, 0x27, 0x73, 0x89, 0xec, 0x76, 0xa6, 0xcc, 0x67, 0xe8, 0xf6, 0x5c, 0x5e, 0x1c, 0x4c, 0xc, 0x28, 0xb3, 0x52, 0xf4, 0xb8, 0x10, 0x9a, 0xc1, 0xe4, 0xa4, 0xf0, 0x97, 0xf0, 0x90, 0xdb, 0x0, 0xce, 0xd1, 0x4f, 0x24, 0x7f, 0xf9, 0xcc, 0x3e, 0x91, 0x32, 0x9a, 0xd, 0x68, 0xb1, 0xbf, 0x54, 0xa6, 0x59, 0x0, 0x5b, 0x72, 0x7f, 0x13, 0x97, 0x45, 0x12, 0x6, 0x22, 0x4, 0x46, 0x2c, 0x85, 0x32},
					BlockNumber:  1615677322,
					Hash:         []uint8{0x57, 0x53, 0x34, 0x42, 0x55, 0x45, 0x57, 0x51, 0x49, 0x56, 0x41, 0x4d, 0x5a, 0x4e, 0x4f, 0x4e, 0x48, 0x57, 0x56, 0x36, 0x4a, 0x35, 0x47, 0x50, 0x57, 0x59, 0x54, 0x44, 0x46, 0x59, 0x33, 0x55, 0x4d, 0x35, 0x55, 0x46, 0x53, 0x43, 0x48, 0x32, 0x34, 0x33, 0x4b, 0x49, 0x35, 0x45, 0x50, 0x51, 0x44, 0x56, 0x44, 0x41},
				},
				{
					EnvelopeData: []uint8{0x1, 0xa, 0x82, 0x1, 0x2e, 0xe1, 0xc, 0x59, 0x2, 0x4c, 0x83, 0x6d, 0x7c, 0xa1, 0x24, 0x70, 0xb5, 0xac, 0x74, 0x67, 0x30, 0x2, 0x12, 0x7d, 0xde, 0xda, 0xdb, 0xc6, 0xfc, 0x43, 0x75, 0xa8, 0xc0, 0x86, 0xb6, 0x50, 0x6, 0xe, 0xde, 0x19, 0x9f, 0x60, 0x3a, 0x15, 0x8b, 0xc7, 0x88, 0x4a, 0x90, 0x3e, 0xad, 0xf9, 0x7a, 0x2d, 0xd0, 0xfb, 0xe6, 0x9a, 0xc8, 0x1c, 0x21, 0x68, 0x30, 0xf9, 0x4e, 0x56, 0xb8, 0x47, 0xd9, 0x24, 0xb5, 0x1a, 0x7d, 0x82, 0x27, 0xc8, 0x7, 0x14, 0x21, 0x9e, 0x68, 0x21, 0xa5, 0x1b, 0xc7, 0xcb, 0xa9, 0x22, 0xf2, 0x91, 0xa4, 0x7b, 0xdf, 0xfe, 0x29, 0xe7, 0xc3, 0xf6, 0x7a, 0xd9, 0x8, 0xff, 0x37, 0x7b, 0xfc, 0xc0, 0xb6, 0x3, 0x0, 0x7e, 0xad, 0x4b, 0xfd, 0x87, 0xff, 0xa, 0xcc, 0x27, 0x25, 0x28, 0xca, 0x3, 0xd6, 0x38, 0x1e, 0x6d, 0xe, 0x1e, 0x2c, 0x5d, 0xfd, 0x24, 0xd5, 0x21},
					BlockNumber:  1613077932,
					Hash:         []uint8{0x57, 0x57, 0x55, 0x41, 0x37, 0x57, 0x32, 0x4a, 0x32, 0x4d, 0x46, 0x47, 0x59, 0x33, 0x52, 0x41, 0x58, 0x4a, 0x53, 0x33, 0x33, 0x44, 0x41, 0x4e, 0x44, 0x4b, 0x37, 0x57, 0x59, 0x34, 0x4d, 0x42, 0x50, 0x44, 0x33, 0x44, 0x4b, 0x48, 0x37, 0x43, 0x59, 0x33, 0x34, 0x49, 0x44, 0x48, 0x50, 0x58, 0x58, 0x55, 0x55, 0x51},
					RekeyAddress: encodingtest.MustDecodeBase32("UWH6MCLMZSD2UYWTJVKFKX6JMTX2TGXAOYPUBNHFFQFBBVJULXJXZJNPBU"),
				},
			},
			false,
		},
		{
			"err-not-supported-network",
			fields{
				algorand.Testnet,
				"",
				zerolog.Nop(),
			},
			args{
				context.Background(),
				protocols.Algorand,
				algorand.Testnet,
				encodingtest.MustDecodeBase32("UWH6MCLMZSD2UYWTJVKFKX6JMTX2TGXAOYPUBNHFFQFBBVJULXJXZJNPBU"),
			},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			server := httptest.NewServer(
				http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
					fileName := filepath.Join("./testdata/", t.Name()+".json")
					res, _ := ioutil.ReadFile(fileName)
					w.Write(res)
				}),
			)
			defer server.Close()

			c := &Client{
				networkConfigs: map[string]networkConfig{
					tt.fields.network: {url: server.URL},
				},
				algodToken: tt.fields.algodToken,
				logger:     tt.fields.logger,
			}
			got, err := c.Receive(tt.args.ctx, tt.args.protocol, tt.args.network, tt.args.address)
			if (err != nil) != tt.wantErr {
				t.Errorf("Client.Receive() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !assert.Equal(t, tt.want, got) {
				t.Errorf("Client.Receive() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestClient_Kind(t *testing.T) {
	type fields struct {
		networkConfigs map[string]networkConfig
		algodToken     string
	}
	tests := []struct {
		name   string
		fields fields
		want   string
	}{
		{
			"success",
			fields{
				nil,
				"",
			},
			"algod",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			c := &Client{
				networkConfigs: tt.fields.networkConfigs,
				algodToken:     tt.fields.algodToken,
			}
			if got := c.Kind(); got != tt.want {
				t.Errorf("Client.Kind() = %v, want %v", got, tt.want)
			}
		})
	}
}
